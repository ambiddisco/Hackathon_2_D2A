
R version 4.4.2 (2024-10-31 ucrt) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "pollenpackage"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "pollenpackage-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('pollenpackage')
Warning: replacing previous import 'dplyr::union' by 'raster::union' when loading 'pollenpackage'
Warning: replacing previous import 'dplyr::intersect' by 'raster::intersect' when loading 'pollenpackage'
Warning: replacing previous import 'dplyr::select' by 'raster::select' when loading 'pollenpackage'
Warning: replacing previous import 'raster::predict' by 'stats::predict' when loading 'pollenpackage'
Warning: replacing previous import 'dplyr::lag' by 'stats::lag' when loading 'pollenpackage'
Warning: replacing previous import 'raster::quantile' by 'stats::quantile' when loading 'pollenpackage'
Warning: replacing previous import 'dplyr::filter' by 'stats::filter' when loading 'pollenpackage'
Warning: replacing previous import 'raster::aggregate' by 'stats::aggregate' when loading 'pollenpackage'
Warning: replacing previous import 'raster::weighted.mean' by 'stats::weighted.mean' when loading 'pollenpackage'
Warning: replacing previous import 'raster::density' by 'stats::density' when loading 'pollenpackage'
Warning: replacing previous import 'raster::update' by 'stats::update' when loading 'pollenpackage'
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("SwissCities")
> ### * SwissCities
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SwissCities
> ### Title: Swiss Cities Dataset
> ### Aliases: SwissCities
> 
> ### ** Examples
> 
> if (requireNamespace("readr", quietly = TRUE)) {
+   path <- get_swiss_cities_path()
+   swiss_cities <- readr::read_csv(path)
+   head(swiss_cities)
+ }
Rows: 200 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (7): city, city_ascii, country, iso2, iso3, admin_name, capital
dbl (4): lat, lng, population, id

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
# A tibble: 6 × 11
  city  city_ascii   lat   lng country iso2  iso3  admin_name capital population
  <chr> <chr>      <dbl> <dbl> <chr>   <chr> <chr> <chr>      <chr>        <dbl>
1 Züri… Zurich      47.4  8.54 Switze… CH    CHE   Zürich     admin       447082
2 Gene… Geneva      46.2  6.15 Switze… CH    CHE   Genève     admin       203840
3 Basel Basel       47.6  7.59 Switze… CH    CHE   Basel-Sta… admin       173552
4 Laus… Lausanne    46.5  6.63 Switze… CH    CHE   Vaud       admin       141418
5 Bern  Bern        46.9  7.45 Switze… CH    CHE   Bern       primary     134506
6 Wint… Winterthur  47.5  8.73 Switze… CH    CHE   Zürich     minor       109775
# ℹ 1 more variable: id <dbl>
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SwissCities", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_canton_pollen_forecast")
> ### * get_canton_pollen_forecast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_canton_pollen_forecast
> ### Title: get_canton_pollen_forecast returns a forecast of the pollen
> ###   distribution of eacch canton in a dataframe form
> ### Aliases: get_canton_pollen_forecast
> 
> ### ** Examples
> 
> get_canton_pollen_forecast() -> df
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_canton_pollen_forecast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_map_path")
> ### * get_map_path
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_map_path
> ### Title: Get full path to a shapefile in extdata/maps/
> ### Aliases: get_map_path
> 
> ### ** Examples
> 
> get_map_path("see")
[1] "C:/Users/nicol/Documents/supsi_locale/data_project/Hackathon_2_D2A/pollenpackage/check_output/pollenpackage.Rcheck/pollenpackage/extdata/maps/see/k4seenyyyymmdd11_ch2007Poly.shp"
> get_map_path("kanton")
[1] "C:/Users/nicol/Documents/supsi_locale/data_project/Hackathon_2_D2A/pollenpackage/check_output/pollenpackage.Rcheck/pollenpackage/extdata/maps/kanton/K4kant20220101gf_ch2007Poly.shp"
> get_map_path("berggebiete")
[1] "C:/Users/nicol/Documents/supsi_locale/data_project/Hackathon_2_D2A/pollenpackage/check_output/pollenpackage.Rcheck/pollenpackage/extdata/maps/berggebiete/K4_bgbr20210101gf_ch2007Poly.shp"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_map_path", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_pollen_forecast")
> ### * get_pollen_forecast
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_pollen_forecast
> ### Title: get_pollen_forecast: fetches information from api and loads the
> ###   data.
> ### Aliases: get_pollen_forecast
> 
> ### ** Examples
> 
> get_pollen_forecast() -> pollen_df
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_pollen_forecast", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get_swiss_cities_path")
> ### * get_swiss_cities_path
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get_swiss_cities_path
> ### Title: Get full path to SwissCities.csv
> ### Aliases: get_swiss_cities_path
> 
> ### ** Examples
> 
> ## Not run: swiss_cities <- read.csv(get_swiss_cities_path())
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get_swiss_cities_path", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_cantons")
> ### * plot_cantons
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_cantons
> ### Title: Plot Cantons with Value Overlay
> ### Aliases: plot_cantons
> 
> ### ** Examples
> 
> value_df <- tibble::tibble(
+   canton = c("Zürich", "Bern", "Luzern", "Uri", "Schwyz"),
+   avg = c(78.5, 82.3, 80.1, 75.0, 79.4)
+ )
> plot_cantons(value_df, value_colname = "avg", title = "Life Expectancy in")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_cantons", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10.54 0.75 81.9 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
